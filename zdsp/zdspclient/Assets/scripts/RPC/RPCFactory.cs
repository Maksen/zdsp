//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Zealot.Common.RPC;
using Zealot.Repository;

public static class RPCFactory
{
    private static Type contextType;

	public static CombatRPC CombatRPC;
	public static ActionRPC ActionRPC;
	public static LobbyRPC LobbyRPC;
    public static LocalObjectRPC LocalObjectRPC;
    public static UnreliableCombatRPC UnreliableCombatRPC;
    public static NonCombatRPC NonCombatRPC;

    private static bool isSuspended = false;
    public static bool Suspended { get { return isSuspended; } }

    static RPCFactory ()
	{
		CombatRPC = new CombatRPC ();
		ActionRPC = new ActionRPC ();
		LobbyRPC = new LobbyRPC ();
        LocalObjectRPC = new LocalObjectRPC();
        UnreliableCombatRPC = new UnreliableCombatRPC();
        NonCombatRPC = new NonCombatRPC();
    }

	public static void SetMainContext(Type t)
	{
        if (t != contextType)
            isSuspended = false;

        contextType = t;

        CombatRPC.SetMainContext(t, RPCCategory.Combat);
		LobbyRPC.SetMainContext(t, RPCCategory.Lobby);
        LocalObjectRPC.SetMainContext(t, RPCCategory.LocalObject);
        UnreliableCombatRPC.SetMainContext(t, RPCCategory.UnreliableCombat);
        NonCombatRPC.SetMainContext(t, RPCCategory.NonCombat);
    }

    public static void SuspendRPC()
    {
        UIManager.StartHourglass(600.0f);
        isSuspended = true;
    }

    public static void UnSuspendRPC()
    {
        isSuspended = false;
        UIManager.StopHourglass();
    }

    #region Profiling
    public static void ResetProfilerForNextFrame()
    {
        CombatRPC.ResetProfilingCounters();
        ActionRPC.ResetProfilingCounters();
        LobbyRPC.ResetProfilingCounters();
        LocalObjectRPC.ResetProfilingCounters();
        UnreliableCombatRPC.ResetProfilingCounters();
        NonCombatRPC.ResetProfilingCounters();
    }

    public static int GetTotalBytesReceived()
    {
        return LobbyRPC.BytesReceivedThisFrame 
               + CombatRPC.BytesReceivedThisFrame 
               + ActionRPC.BytesReceivedThisFrame
               + LocalObjectRPC.BytesReceivedThisFrame
               + UnreliableCombatRPC.BytesReceivedThisFrame
               + NonCombatRPC.BytesReceivedThisFrame
               ;
    }

    public static int GetTotalBytesSent()
    {
        return LobbyRPC.BytesSentThisFrame
               + CombatRPC.BytesSentThisFrame
               + ActionRPC.BytesSentThisFrame
               + LocalObjectRPC.BytesSentThisFrame
               + UnreliableCombatRPC.BytesSentThisFrame
               + NonCombatRPC.BytesSentThisFrame
               ;
    }
    #endregion
}


